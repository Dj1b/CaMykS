<?php
/*
 * CaMykS Engine
 * Developed by     : camyks.net
 * Author           : CaMykS Team <camyks.contact@gmail.com>
 * CaMykS Version   : 1.0
 * Object Version   : 1.0
 * Creation Date    : Sep 2014
 * Last Modif Date  : Nov 2017
 *
 * CaMykS Generic Database connection object
 * to be extended by specific database connection objects
 */

abstract class CDBConnection {
    
  protected $active;
  protected $connection;
  protected $queryRes;
  protected $dbName;

  /*
   * Class constructor
   * @return void
   * @access private
   */
  public function __construct() {
    $this->active = false;
    $this->connection = null;
    $this->queryRes = array();
    $this->dbName = null;
  }

  /* server related methods */
  
  /*
   * connect to server
   * @param string $host
   * @param string $login
   * @param string $pwd
   * @return boolean success
   * @access private
   */
  abstract public function connect_server($host='localhost', $login='', $pwd='', $driver='');
  
  /*
   * close server connection
   * @return boolean success
   * @access private
   */
  abstract public function disconnect_server();
  
  /*
   * check if connection is active
   * @return boolean success
   * @access private
   */
  public function is_connectionActive() {
    return $this->active;
  }
  
  /*
   * return version 
   * @return string
   * @access public
   */
  abstract public function get_serverVersion();
  
  /* database related methods */
  
  /*
   * select table
   * @param string $name the database name
   * @return boolean
   * @access public
   */
  abstract public function select_database($name);
  
  /* 
   * create a database
   * @param string $name
   * @param string $charset
   * @return boolean
   * @access public
   */
  abstract public function create_database($name, $charset='utf8');

  /*
   * check if a base exits
   * @param string $name
   * @return boolean
   * @access public
   */
  abstract public function database_exists($name);

  /*
   * dump database
   * @param mixed $file
   * @return mixed
   * @access public
   */
  abstract public function dump_database($file=false);

  /*
   * return database size
   * @return integer
   * @access public
   */
  abstract public function get_databaseSize();
  
  /*
   * return database summary
   * @return array
   * @access public
   */
  abstract public function get_databaseSummary();
  
  /* table related methods */
  
  /*
   * return available table list
   * @return array
   * @access public
   */
  abstract public function get_tableList();
  
  /*
   * create a table in the database
   * @param string $name
   * @param array $fields
   * @param string $charset
   * @param boolean $autoId
   * @param array $primaryKeys
   * @return boolean success
   * @access private
   */
  abstract public function create_table($name, $fields, $charset='utf8', $autoId=true, $primaryKeys=array('id'));
  
  /* query related methods */
    
  /*
   * execute query
   * @param string $sql
   * @param string $resName
   * @return boolean success
   * @access public
   */
  abstract public function execute_query($sql='', $resName='defaultRes');

  /*
   * return id generated by last query
   * @param string $resName
   * @return integer
   * @access public
   */
  abstract public function get_queryGeneratedId($resName='defaultRes');

  /*
   * return next query data line
   * @param string $resName
   * @return array
   * @access public
   */
  abstract public function get_queryDataLine($resName='defaultRes');
  
  /*
   * return next query data line with numeric indexes
   * @param string $resName
   * @return array
   * @access public
   */
  abstract public function get_queryNumDataLine($resName='defaultRes');

  /*
   * return latest query error
   * @param string $resName
   * @return string
   * @access public
   */
  abstract public function get_queryError($resName='defaultRes');

  /*
   * return latest query affected rows
   * @param string $resName
   * @return integer
   * @access public
   */
  abstract public function get_queryAffectedRows($resName='defaultRes');
  
  /*
   * return latest query field count
   * @param string $resName
   * @return integer 
   * @access public
   */
  abstract public function get_queryFieldCount($resName='defaultRes');
  
  /*
   * return latest query field type
   * @param integer $fIndex
   * @param string $resName
   * @return string
   * @access public
   */
  abstract public function get_queryFieldType($fIndex=0, $resName='defaultRes');
  
  /*
   * close ressource
   * @param string $resName
   * @return boolean result
   * @access public
   */
  abstract public function close_ressource($resName='defaultRes');
  
  /* data related methods */
  
  /*
   * return escaped string
   * @param string $string
   * @return string
   * @access public
   */
  public function escape_string($string) {
    return addslashes($string);
  }
  
  /* internal methods */
  
  /*
   * return automatic ressource name
   * @return string
   * @access protected
   */
  protected function get_resName() {
    $c = count($this->queryRes)+1;
    while (isset($this->queryRes['res'.$c]))
      $c++;
    return 'res'.$c;
  }
}