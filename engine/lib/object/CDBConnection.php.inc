<?php
/**
 * @brief CaMykS Generic Database connection object
 * <br /> To be extended by specific database connection objects
 * @details Engine / Object Library
 * @file engine/lib/object/CDBConnection.php.inc
 * @author CaMykS Team <camyks.contact@gmail.com>
 * @version 1.0.1
 * @date Creation: Sep 2014
 * @date Modification: Apr 2018
 * @copyright 2014 - 2018 CaMykS Team
 * @note This program is distributed as is - WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

/**
 * CDBConnection class.
 * @author CaMykS Team <camyks.contact@gmail.com>
 */
abstract class CDBConnection {
    /**
     * @var boolean $action
     * @brief CDBConnection status.
     */
    protected $active = false;
    
    /**
     * @var Ressource $connection
     * @brief CDBConnection database ressource.
     */
    protected $connection = null;
    
    /**
     * @var array $queryRes
     * @brief Query ressources.
     */
    protected $queryRes = array();
    
    /**
     * @var string $dbName
     * @brief Name of the database.
     */
    protected $dbName = null;

    /**
     * Class constructor.
     * @return void
     */
    public function __construct() {
    }

    /* server related methods */

    /**
     * Connect to server.
     * @param string $host
     * @param string $login
     * @param string $pwd
     * @return boolean success
     */
    abstract public function connect_server($host='localhost', $login='', $pwd='', $driver='');

    /**
     * Close server connection.
     * @return boolean success
     */
    abstract public function disconnect_server();

    /**
     * Check if connection is active.
     * @return boolean success
     */
    public function is_connectionActive() {
        return $this->active;
    }

    /**
     * Check database status.
     * @param string $name
     * @return array
     */
    public function check_status($name) {
        if (!$this->is_connectionActive())
            return array('ServerConnected'=>false, 'DatabaseExists'=>false);

        if ($this->dbName == null)
            $db = $this->database_exists($name);
        else
            $db = true;

        return array('ServerConnected'=>$this->is_connectionActive(), 'DatabaseExists'=>$db);
    }

    /**
     * Return database engine version.
     * @return string
     */
    abstract public function get_serverVersion();

    /* database related methods */

    /**
     * Select database.
     * @param string $name
     * @return boolean
     */
    abstract public function select_database($name);

    /**
     * Create a database.
     * @param string $name
     * @param string $charset
     * @return boolean
     */
    abstract public function create_database($name, $charset='utf8');

    /**
     * Check if a base exits.
     * @param string $name
     * @return boolean
     */
    abstract public function database_exists($name);

    /**
     * Dump database.
     * @param mixed $file
     * @return mixed
     */
    abstract public function dump_database($file=false);

    /**
     * Return database size.
     * @return integer
     */
    abstract public function get_databaseSize();

    /**
     * Return database summary.
     * @return array
     */
    abstract public function get_databaseSummary();

    /* table related methods */

    /**
     * Return available table list.
     * @return array
     */
    abstract public function get_tableList();

    /**
     * Create a table in the database.
     * @param string $name
     * @param array $fields
     * @param string $charset
     * @param boolean $autoId
     * @param array $primaryKeys
     * @return boolean success
     */
    abstract public function create_table($name, $fields, $charset='utf8', $autoId=true, $primaryKeys=array('id'));

    /* query related methods */

    /**
     * Execute query.
     * @param string $sql
     * @param string $resName
     * @return boolean success
     */
    abstract public function execute_query($sql='', $resName='defaultRes');

    /**
     * Return id generated by last query.
     * @param string $resName
     * @return integer
     */
    abstract public function get_queryGeneratedId($resName='defaultRes');

    /**
     * Return next query data line.
     * @param string $resName
     * @return array
     */
    abstract public function get_queryDataLine($resName='defaultRes');

    /**
     * Return next query data line with numeric indexes.
     * @param string $resName
     * @return array
     */
    abstract public function get_queryNumDataLine($resName='defaultRes');

    /**
     * Return latest query error.
     * @param string $resName
     * @return string
     */
    abstract public function get_queryError($resName='defaultRes');

    /**
     * Return latest query affected rows.
     * @param string $resName
     * @return integer
     */
    abstract public function get_queryAffectedRows($resName='defaultRes');

    /**
     * Return latest query field count.
     * @param string $resName
     * @return integer 
     */
    abstract public function get_queryFieldCount($resName='defaultRes');

    /**
     * Return latest query field type.
     * @param integer $fIndex
     * @param string $resName
     * @return string
    */
    abstract public function get_queryFieldType($fIndex=0, $resName='defaultRes');

    /**
     * Close ressource.
     * @param string $resName
     * @return boolean result
     */
    abstract public function close_ressource($resName='defaultRes');

    /* data related methods */

    /**
     * Return escaped string.
     * @param string $string
     * @return string
     */
    public function escape_string($string) {
        return addslashes($string);
    }

    /* special methods */

    /**
     * Return specific insert extra from driver.
     * @return string
     */
    public function get_insertExtra() {
        return '';
    }

    /* internal methods */

    /**
     * Return automatic ressource name.
     * @return string
     * @access protected
     */
    protected function get_resName() {
        $c = count($this->queryRes)+1;
        while (isset($this->queryRes['res'.$c]))
            $c++;
        return 'res'.$c;
    }
}