<?php
/*
 * CaMykS Engine
 * Developed by     : camyks.net
 * Author           : CaMykS Team <camyks.contact@gmail.com>
 * CaMykS Version   : 1.0
 * Object Version   : 1.0
 * Creation Date    : Sep 2014
 * Last Modif Date  : Oct 2017
 *
 * MySQLi Database connection object
 */

final class MySQLiDBConnection extends CDBConnection {

  /*
   * Class constructor
   * @return void
   * @access public
   */
  public function __construct() {
    parent::__construct();
  }

  /* server related methods */
  
  /*
   * connect to server
   * @param string $host
   * @param string $login
   * @param string $pwd
   * @return boolean success
   * @access public
   */
  public function connect_server($host='localhost', $login='', $pwd='', $driver='') {
    /* database server connection */
    $this->connection = @(new MySQLi($host, $login, $pwd));
   
    /* check if connection is made successfully */
    $this->active = ($this->connection->connect_errno === 0);
    return $this->active;
  }
  
  /*
   * close server connection
   * @return boolean success
   * @access public
   */
  public function disconnect_server() {
    if ($this->is_connectionActive())
      return $this->connection->close();
    return true;
  }
  
  /*
   * return version
   * @return string
   * @access public
   */
  public function get_version() {
    if ($this->is_connectionActive())
      return $this->connection->server_info;
    return '';
  }
  
  /* database related methods */
  
  /*
   * select table
   * @param string $name the database name
   * @return boolean
   * @access public
   */
  public function select_database ( $name ) {
    if (!$this->is_connectionActive())
      return false;
    $this->dbName = $name;
    return $this->connection->select_db($name);
  }
  
  /* 
   * create a database
   * @param string $name
   * @param string $charset
   * @return boolean
   * @access public
   */
  public function create_database ( $name, $charset='utf8' ) {
    return $this->execute_query('CREATE DATABASE '.$name.' DEFAULT CHARACTER SET '.$charset);
  }

  /*
   * check if a base exits
   * @param string $name
   * @return boolean
   * @access public
   */
  public function database_exists ( $name ) {
    return $this->connection->select_db($name);
  }
  
  /* query related methods */
    
  /*
   * execute query
   * @param string $sql
   * @param string $resName
   * @return boolean success
   * @access public
   */
  public function execute_query($sql='', $resName='defaultRes') {
    $this->queryRes[$resName] = $this->connection->query($sql);
    return ($this->queryRes[$resName] !== false);
  }

  /*
   * return id generated by last query
   * @param string $resName
   * @return integer
   * @access public
   */
  public function get_queryGeneratedId($resName='defaultRes') {
    return $this->connection->insert_id;
  }

  /*
   * return next query data line
   * @param string $resName
   * @return array
   * @access public
   */
  public function get_queryDataLine($resName='defaultRes') {
    if (isset($this->queryRes[$resName]))
      return $this->queryRes[$resName]->fetch_assoc();
    return false;
  }
  
  /*
   * return next query data line with numeric indexes
   * @param string $resName
   * @return array
   * @access public
   */
  public function get_queryNumDataLine($resName='defaultRes') {
    if (isset($this->queryRes[$resName]))
      return $this->queryRes[$resName]->fetch_row();
    return false;
  }

  /*
   * return latest query error
   * @param string $resName
   * @return string
   * @access public
   */
  public function get_queryError($resName='defaultRes') {
    return $this->connection->error;
  }

  /*
   * return latest query affected rows
   * @param string $resName
   * @return integer
   * @access public
   */
  public function get_queryAffectedRows($resName='defaultRes') {
    return $this->connection->affected_rows;
  }
  
  /*
   * return latest query field count
   * @param string $resName
   * @return integer 
   * @access public
   */
  public function get_queryFieldCount($resName='defaultRes') {
    if (isset($this->queryRes[$resName]))
      return $this->queryRes[$resName]->field_count;
    return '';
  }
  
  /*
   * return latest query field type
   * @param integer $fIndex
   * @param string $resName
   * @return string
   * @access public
   */
  public function get_queryFieldType($fIndex=0, $resName='defaultRes') {
    if (isset($this->queryRes[$resName])) {
      $finfo = $this->queryRes[$resName]->fetch_field_direct($fIndex);
      return $this->get_compatibleType($finfo->type);
    }
    return false;
  }
  
  /*
   * close ressource
   * @param string $resName
   * @return boolean result
   * @access public
   */
  public function close_ressource($resName='defaultRes') {
    if (isset($this->queryRes[$resName]))
      return $this->queryRes[$resName]->close();
    return true;
  }
  
  /* data related methods */
  
  /*
   * return escaped string
   * @param string $string
   * @return string
   * @access public
   */
  public function escape_string($string) {
    return mysqli_real_escape_string($this->connection, $string);
  }
  
  /*
   * return mysql compatible type from given type
   * @param integer $type
   * @return string
   * @access private
   */
  private function get_compatibleType($type=1) {
    switch ($type) {
      /* int */
      case 1 /* tinyint */: case 2 /* smallint */: case 3 /* int */:  case 8 /* bigint */: case 9 /* mediumint */: case 16 /* bit */: return 'int';
      
      /* float */
      case 4 /* float */: case 5 /* double */: case 246 /* decimal*/: return 'real';
      
      /* date & time */
      case 7: return 'timestamp';
      case 10: return 'date';
      case 11: return 'time';
      case 12: return 'datetime';
      case 13: return 'year';
      
      /* blobs */
      case 252: return 'blob';
      
      /* texts */
      case 253 /* varchar */ : case 254 /* char */: return 'string';
    }
    return '';
  }
}